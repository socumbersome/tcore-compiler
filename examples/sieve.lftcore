*pack2,2  = Pack{2,2};
*pack1,0  = Pack{1,0};
id x_0 = x_0;
compose f_1 g_2 x_3 = f_1 (g_2 x_3);
twice f_4 = compose f_4 f_4;
length xs_5 = case xs_5 of
  {1}  -> 0,
  {2} y_6 ys_7 -> 1 + (length ys_7);
downfrom n_8 = if n_8 == 0 then
  *pack1,0
else
  *pack2,2 n_8 (downfrom (n_8 - 1));
filter p_9 xs_10 = case xs_10 of
  {1}  -> *pack1,0,
  {2} y_11 ys_12 -> let
                      rest_13 = filter p_9 ys_12
                    in if p_9 y_11 then
                      *pack2,2 y_11 rest_13
                    else
                      rest_13;
take n_14 xs_15 = case xs_15 of
  {1}  -> *pack1,0,
  {2} y_16 ys_17 -> if n_14 == 0 then
                      *pack1,0
                    else
                      *pack2,2 y_16 (take (n_14 - 1) ys_17);
from n_18 = *pack2,2 n_18 (from (n_18 + 1));
nonMultiple p_19 n_20 = ((n_20 / p_19) * p_19) != n_20;
sieve xs_21 = case xs_21 of
  {1}  -> *pack1,0,
  {2} p_22 ps_23 -> *pack2,2 p_22 (sieve (filter (nonMultiple p_22) ps_23));
main  = take 3 (sieve (from 2))